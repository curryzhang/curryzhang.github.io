const e=JSON.parse('{"key":"v-6905c635","path":"/code/gRPC%E4%BD%BF%E7%94%A8.html","title":"gRPC使用","lang":"zh-CN","frontmatter":{"title":"gRPC使用","icon":"page","order":2,"author":"curryzhang","date":"2023-02-16T00:00:00.000Z","category":["gRPC"],"tag":["gRPC",".Net Core"],"sticky":true,"description":"GRPC gRPC 是一个由Google开源的，跨语言的，高性能的远程过程调用（RPC）框架。 gRPC使客户端和服务端应用程序可以透明地进行通信，并简化了连接系统的构建。它使用HTTP/2作为通信协议，使用 Protocol Buffers 作为序列化协议。 gRPC 的优势 gRPC 使用 HTTP/2 作为传输协议。 虽然与 HTTP 1.1 也能兼容，但 HTTP/2 具有许多高级功能： 用于数据传输的二进制组帧协议 - 与 HTTP 1.1 不同，HTTP 1.1 是基于文本的。 对通过同一连接发送多个并行请求的多路复用支持 - HTTP 1.1 将处理限制为一次处理一个请求/响应消息。 双向全双工通信，用于同时发送客户端请求和服务器响应。 内置流式处理，支持对大型数据集进行异步流式处理的请求和响应。 减少网络使用率的标头压缩。","head":[["meta",{"property":"og:url","content":"https://github.com/curryzhang/CurryBook/code/gRPC%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"小东视界"}],["meta",{"property":"og:title","content":"gRPC使用"}],["meta",{"property":"og:description","content":"GRPC gRPC 是一个由Google开源的，跨语言的，高性能的远程过程调用（RPC）框架。 gRPC使客户端和服务端应用程序可以透明地进行通信，并简化了连接系统的构建。它使用HTTP/2作为通信协议，使用 Protocol Buffers 作为序列化协议。 gRPC 的优势 gRPC 使用 HTTP/2 作为传输协议。 虽然与 HTTP 1.1 也能兼容，但 HTTP/2 具有许多高级功能： 用于数据传输的二进制组帧协议 - 与 HTTP 1.1 不同，HTTP 1.1 是基于文本的。 对通过同一连接发送多个并行请求的多路复用支持 - HTTP 1.1 将处理限制为一次处理一个请求/响应消息。 双向全双工通信，用于同时发送客户端请求和服务器响应。 内置流式处理，支持对大型数据集进行异步流式处理的请求和响应。 减少网络使用率的标头压缩。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-29T08:35:16.000Z"}],["meta",{"property":"article:author","content":"curryzhang"}],["meta",{"property":"article:tag","content":"gRPC"}],["meta",{"property":"article:tag","content":".Net Core"}],["meta",{"property":"article:published_time","content":"2023-02-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-29T08:35:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"gRPC使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-29T08:35:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"curryzhang\\"}]}"]]},"headers":[{"level":2,"title":"GRPC","slug":"grpc","link":"#grpc","children":[]},{"level":2,"title":"GRPC示例","slug":"grpc示例","link":"#grpc示例","children":[]},{"level":2,"title":"新增Proto文件","slug":"新增proto文件","link":"#新增proto文件","children":[]},{"level":2,"title":"服务流、客户流和双向流的使用","slug":"服务流、客户流和双向流的使用","link":"#服务流、客户流和双向流的使用","children":[]}],"git":{"createdTime":1679502761000,"updatedTime":1680078916000,"contributors":[{"name":"curry.zhang","email":"curry.zhang@tineco.com","commits":2},{"name":"15850365846","email":"CurryZhang66@","commits":1}]},"readingTime":{"minutes":5.89,"words":1767},"filePathRelative":"code/gRPC使用.md","localizedDate":"2023年2月16日","excerpt":"<h2> GRPC</h2>\\n<p>gRPC 是一个由Google开源的，跨语言的，高性能的远程过程调用（RPC）框架。 gRPC使客户端和服务端应用程序可以透明地进行通信，并简化了连接系统的构建。它使用HTTP/2作为通信协议，使用 Protocol Buffers 作为序列化协议。</p>\\n<h4> gRPC 的优势</h4>\\n<p>gRPC 使用 HTTP/2 作为传输协议。 虽然与 HTTP 1.1 也能兼容，但 HTTP/2 具有许多高级功能：</p>\\n<ul>\\n<li>用于数据传输的二进制组帧协议 - 与 HTTP 1.1 不同，HTTP 1.1 是基于文本的。</li>\\n<li>对通过同一连接发送多个并行请求的多路复用支持 - HTTP 1.1 将处理限制为一次处理一个请求/响应消息。</li>\\n<li>双向全双工通信，用于同时发送客户端请求和服务器响应。</li>\\n<li>内置流式处理，支持对大型数据集进行异步流式处理的请求和响应。</li>\\n<li>减少网络使用率的标头压缩。</li>\\n</ul>","autoDesc":true}');export{e as data};
