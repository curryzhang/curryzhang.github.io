(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{183:function(t,e,n){"use strict";n.r(e);var s=n(0),a=Object(s.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("泛型就是泛指的类型。这是在.NET Framework 2.0出现的语法。")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),n("p",[t._v("下面我分别来说明这三点。")]),t._v(" "),n("ol",[n("li",[t._v("泛型会约束变量的类型。比如ArryList可以添加任意类型的值，而List"),n("int",[t._v("只能添加int类型的值")])],1)]),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._m(7),t._v(" "),t._m(8),t._m(9),t._v(" "),n("p",[t._v("话不多少，先看代码")]),t._v(" "),t._m(10),n("p",[t._v("泛型默认会有一个约束，当我们不显示的声明时，这个约束不存在。但当我们显示的声明的时候，这个约束就会执行。")]),t._v(" "),n("p",[t._v("从代码中可以看出where T : Base就是这个特别的约束。这个约束限制了泛型的类型，要求我们Generic类的指定类型T必须是Base或者继承Base类的类型。")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),n("p",[t._v("泛型不仅能作用在类上，也可单独用在方法上，它可以根据方法参数的类型自动适应各种参数，这样的方法叫泛型方法。")]),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),n("p",[t._v("参考："),n("a",{attrs:{href:"https://www.cnblogs.com/kiba/p/9321530.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("C#语法——泛型的多种应用"),n("OutboundLink")],1)])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"c-重温—泛型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-重温—泛型","aria-hidden":"true"}},[this._v("#")]),this._v(" C#重温—泛型")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"泛型定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#泛型定义","aria-hidden":"true"}},[this._v("#")]),this._v(" 泛型定义")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("泛型的好处：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("类型的安全性")]),this._v(" "),e("li",[this._v("代码的可重用性")]),this._v(" "),e("li",[this._v("提升效率（避免了不必要的装箱拆箱）。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('ArrayList list = new ArrayList();\nlist.Add("hello");\nlist.Add(1111);\n\n List<int> list = new List<int>();\nlist.Add(11);\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"2"}},[e("li",[this._v("定义了一个泛型类Generic来提高代码可重用性，在指定的时候是泛指类型，在使用的时候就需要特定类型。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('static void Main(string[] args)\n{\n  Generic<string> gs1 = new Generic<string>();\n  gs1.Name = "hello world";\n  Console.WriteLine(gs1.Name);\n\n  Generic<int> gs2 = new Generic<int>();\n  gs2.Name = 111;\n  Console.WriteLine(gs2.Name);\n\n  Generic<Task> gsTask = new Generic<Task>();\n  gsTask.Name = Task.Run(() => {\n    Console.WriteLine("这是一个Task");\n  });\n}\n\npublic class Generic<T>\n{\n  public T Name=default(T);\n}\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"3"}},[e("li",[this._v("泛型会固定类型，在使用的时候就知道是什么类型了，避免了不必要的类型转换。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('object a = 18;\nint b = (int)a;\n//泛型\nint c = GetValue<int>(19);\nstring b = GetValue<string>("hello");\n public static T GetValue<T>(T a)\n{\n  return a;\n}\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"泛型约束"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#泛型约束","aria-hidden":"true"}},[this._v("#")]),this._v(" 泛型约束")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('static void Main(string[] args)\n{\n    Generic<Fanxing> g = newGeneric<Fanxing>();\n    Fanxing fx = new Fanxing();\n    fx.Name = "Jack";\n    g.Name = fx;\n    Console.WriteLine(g.Name.Name);\n    \n    Generic<Base> gsBase = newGeneric<Base>();\n    Base b = new Base();\n    b.Name = "Curry";\n    gsBase.Name = b;\n    Console.WriteLine(gsBase.Name.Name);\n    \n    Console.ReadKey();\n}\n\npublic class Generic<T> where T :Base\n{\n    public T Name=default(T);\n}\npublic class Base\n{\n    public string Name { get; set; }\n}\npublic class Fanxing:Base\n{\n    public new string Name { get; set; }\n}\n')])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("table",[n("thead",[n("tr",[n("th",[t._v("约束")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("T：struct")]),t._v(" "),n("td",[t._v("类型参数必须是值类型。可以指定除 Nullable 以外的任何值类型。")])]),t._v(" "),n("tr",[n("td",[t._v("T：class")]),t._v(" "),n("td",[t._v("类型参数必须是引用类型，包括任何类、接口、委托或数组类型。")])]),t._v(" "),n("tr",[n("td",[t._v("T：new()")]),t._v(" "),n("td",[t._v("类型参数必须具有无参数的公共构造函数。当与其他约束一起使用时，new() 约束必须最后指定。")])]),t._v(" "),n("tr",[n("td",[t._v("T：<基类名>")]),t._v(" "),n("td",[t._v("类型参数必须是指定的基类或派生自指定的基类。")])]),t._v(" "),n("tr",[n("td",[t._v("T：<接口名称>")]),t._v(" "),n("td",[t._v("类型参数必须是指定的接口或实现指定的接口。可以指定多个接口约束。约束接口也可以是泛型的。")])]),t._v(" "),n("tr",[n("td",[t._v("T：U")]),t._v(" "),n("td",[t._v("为 T 提供的类型参数必须是为 U 提供的参数或派生自为 U 提供的参数。这称为裸类型约束。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"泛型函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#泛型函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 泛型函数")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('static void Main(string[] args)\n{\n    Person p = new Person();\n    p.GetInfo<int>(11);\n    p.GetInfo<string>("11");\n    Console.ReadKey();\n}\n\npublic class Person\n{\n    public void GetInfo<T>(T obj)\n    {\n        if (obj.GetType()== typeof(int))\n        {\n            Console.WriteLine("这是一个int类型:"+ obj.GetType());\n        }else if (obj.GetType() == typeof(string))\n        {\n            Console.WriteLine("这是一个string类型");\n        }\n    }\n}\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"泛型委托action和func"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#泛型委托action和func","aria-hidden":"true"}},[this._v("#")]),this._v(" 泛型委托Action和Func")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("Action是无返回值的泛型委托,Action至少0个参数，至多16个参数，无返回值。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('Action<string, int> action = (a, b) => Console.WriteLine(a+b); \naction("hello", 18);\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"2"}},[e("li",[this._v("Func是有返回值的泛型委托，Func至少0个参数，至多16个参数，根据返回值泛型返回。必须有返回值，不可void")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Func<int, int, int> add= (x, y) => x + y;\nint result = add(1, 2);\n")])])])}],!1,null,null,null);a.options.__file="泛型.md";e.default=a.exports}}]);