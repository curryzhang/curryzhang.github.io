(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{175:function(e,n,t){"use strict";t.r(n);var r=t(0),a=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"jwt的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jwt的使用","aria-hidden":"true"}},[e._v("#")]),e._v(" JWT的使用")]),e._v(" "),t("h3",{attrs:{id:"jwt说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jwt说明","aria-hidden":"true"}},[e._v("#")]),e._v(" JWT说明")]),e._v(" "),t("p",[e._v("首先JWT是由header、payload和signature（签名）组成，header一般张这样")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{\n  'typ': 'JWT',\n  'alg': 'HS256'\n}\n")])])]),t("p",[e._v("这部分说明了生命的类型和算法")]),e._v(" "),t("p",[e._v("playload是存放有效信息的地方，一般包含三个部分")]),e._v(" "),t("ul",[t("li",[e._v("标准中注册的声明")]),e._v(" "),t("li",[e._v("公共的声明")]),e._v(" "),t("li",[e._v("私有的声明\n可以用这部分来存在用户的一些信息，例如：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    UserName = "curry",\n    Roles = new List<string> { "Admin", "Manager" }, \n    IsAdmin = true \n}\n')])])]),t("p",[e._v("jwt的第三部分是一个签证信息，这个签证信息由三部分组成：")]),e._v(" "),t("ul",[t("li",[e._v("header (base64后的)")]),e._v(" "),t("li",[e._v("payload (base64后的)")]),e._v(" "),t("li",[e._v("secret")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var encodedString = base64UrlEncode(header) + '.' + base64UrlEncode(payload);\n\nvar signature = HMACSHA256(encodedString, 'secret');\n")])])]),t("h3",{attrs:{id:"jwt使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jwt使用","aria-hidden":"true"}},[e._v("#")]),e._v(" JWT使用")]),e._v(" "),t("p",[e._v("安装nuget包JWT")]),e._v(" "),t("p",[e._v("在Web.config文件的AppSetting节点添加")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<add key="SecureKey" value="If someone can change the world, why is that person not you?"/>\n')])])]),t("p",[e._v("新建几个类文件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class LoginRequest\n{\n    public string UserName { get; set; }\n    public string Password { get; set; }\n}\n\npublic class AuthInfo\n{\n    //模拟JWT的payload\n    public string UserName { get; set; }\n    public List<string> Roles { get; set; }\n    public bool IsAdmin { get; set; }\n}\n\npublic class LoginResult\n{\n    public bool Success { get; set; }\n    public string Token { get; set; }\n    public string Message { get; set; }\n}\n")])])]),t("p",[e._v("新建控制器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public LoginResult Post([FromBody]LoginRequest request)\n{\n    LoginResult rs = new LoginResult();\n    //这是是获取用户名和密码的，这里只是为了模拟\n    if (request.UserName == "curry" && request.Password == "123456")\n    {\n        AuthInfo info = new AuthInfo { UserName = "curry", Roles = new List<string> {"Admin","Manager" }, IsAdmin = true };\n        try\n        {\n            byte[] key =Encoding.Default.GetBytes(ConfigurationManager.AppSettings["SecureKey"]);\n           \n            IJwtAlgorithm algorithm = new HMACSHA256Algorithm();\n            IJsonSerializer serializer = new JsonNetSerializer();\n            IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();\n            IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);\n            var token = encoder.Encode(info, key);\n            \n            rs.Message = "返回消息XXXX";\n            rs.Token = token;\n            rs.Success = true;\n        }\n        catch (Exception ex)\n        {\n            rs.Message = ex.Message;\n            rs.Success = false;\n        }\n    }\n    else\n    {\n        rs.Message = "fail";\n        rs.Success = false;\n    }\n    return rs;\n}\n')])])]),t("p",[e._v("客户端获取到token后存放在本地，在下次请求时，将token放到请求头中，这边我用postman模拟请求")]),e._v(" "),t("p",[e._v("先写个特性用来统一使用")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class ApiAuthorizeAttribute: AuthorizeAttribute\n{\n    /// <summary>\n    /// 权限拦截器\n    /// </summary>\n    /// <param name="actionContext"></param>\n    /// <returns></returns>\n    protected override bool IsAuthorized(HttpActionContext actionContext)\n    {\n        var authHeader = from t in actionContext.Request.Headers where t.Key == "auth" selectt.Value.FirstOrDefault();\n        if (authHeader != null)\n        {\n            string token = authHeader.FirstOrDefault();\n            if (!string.IsNullOrEmpty(token))\n            {\n                try\n                {\n                    byte[] key =Encoding.Default.GetBytes(ConfigurationManager.AppSettings["SecureKey"]);\n                    //const string secret = "If someone can change the world, why is that personnot you?";\n                    //secret需要加密\n                    IJsonSerializer serializer = new JsonNetSerializer();\n                    IDateTimeProvider provider = new UtcDateTimeProvider();\n                    IJwtValidator validator = new JwtValidator(serializer, provider);\n                    IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();\n                    IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder);\n                    var json = decoder.DecodeToObject<AuthInfo>(token, key, verify: true);\n                    if (json != null)\n                    {\n                        actionContext.RequestContext.RouteData.Values.Add("auth", json);\n                        return true;\n                    }\n                    return false;\n                }\n                catch (Exception)\n                {\n                    return false;\n                }\n            }\n        }\n        return false;\n    }\n}\n')])])]),t("p",[e._v("再创建一个控制器去测试")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class UserController : ApiController\n{\n    [HttpPost]\n    [Route("Get")]\n    [ApiAuthorize]\n    public string Get()\n    {\n        AuthInfo info = RequestContext.RouteData.Values["auth"] as AuthInfo;\n        if (info == null)\n        {\n            return "获取不到，失败";\n        }\n        else\n        {\n            return $"获取到了，Auth的Name是 {info.UserName}";\n        }\n    }\n}\n')])])])])}],!1,null,null,null);n.default=a.exports}}]);