(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{182:function(a,r,e){"use strict";e.r(r);var t=e(0),s=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,r=a.$createElement,e=a._self._c||r;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组","aria-hidden":"true"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),e("p",[a._v("JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素。\n要取得Array的长度，直接访问length属性：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = [1, 2, 3.14, 'Hello', null, true];\narr.length; // 6\n")])])]),e("p",[a._v("直接给length赋值，会导致Array大小的变化：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = [1, 2, 3];\narr.length; // 3\narr.length = 6;\narr; // arr变为[1, 2, 3, undefined, undefined, undefined]\narr.length = 2;\narr; // arr变为[1, 2]\n")])])]),e("p",[a._v("Array可以通过索引把数组对应的元素变成新的值，如果通过索引赋值时，索引超出本身的范围，同样会改变数组的大小：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = ['A', 'B', 'C'];\narr[1] = 99;\narr; // arr现在变为['A', 99, 'C']\n\n\nvar arr = [1, 2, 3];\narr[5] = 'x';\narr; // arr变为[1, 2, 3, undefined, undefined, 'x']\n")])])]),e("p",[a._v("==在编写代码时，不建议直接修改Array的大小，访问索引时要确保索引不会越界=")]),a._v(" "),e("h3",{attrs:{id:"indexof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#indexof","aria-hidden":"true"}},[a._v("#")]),a._v(" indexOf")]),a._v(" "),e("p",[a._v("与String类似，Array也可以通过indexOf()来搜索一个指定的元素的位置：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = [10, '10', '30', 'xyz'];\narr.indexOf(10); // 元素10的索引为0\narr.indexOf('10'); // 元素'10'的索引为1\narr.indexOf(30); // 元素30没有找到，返回-1\narr.indexOf('30'); // 元素'30'的索引为2\n")])])]),e("p",[a._v("==数字30和字符串'30'是不同的元素==")]),a._v(" "),e("h3",{attrs:{id:"slice"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#slice","aria-hidden":"true"}},[a._v("#")]),a._v(" slice")]),a._v(" "),e("p",[a._v("slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\narr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']\narr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']\n")])])]),e("h3",{attrs:{id:"push和pop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#push和pop","aria-hidden":"true"}},[a._v("#")]),a._v(" push和pop")]),a._v(" "),e("p",[a._v("push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = [1, 2];\narr.push('A', 'B'); // 返回Array新的长度: 4\narr; // [1, 2, 'A', 'B']\narr.pop(); // pop()返回'B'\narr; // [1, 2, 'A']\narr.pop(); arr.pop(); arr.pop(); // 连续pop 3次\narr; // []\n")])])]),e("p",[a._v("空数组继续pop不会报错，而是返回undefined")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("arr=[];\narr.pop();//undefine\narr; // []\n")])])]),e("h3",{attrs:{id:"unshift和shift"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unshift和shift","aria-hidden":"true"}},[a._v("#")]),a._v(" unshift和shift")]),a._v(" "),e("p",[a._v("如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = [1, 2];\narr.unshift('A', 'B'); // 返回Array新的长度: 4\narr; // ['A', 'B', 1, 2]\narr.shift(); // 'A'\narr; // ['B', 1, 2]\narr.shift(); arr.shift(); arr.shift(); // 连续shift 3次\narr; // []\narr.shift(); // 空数组继续shift不会报错，而是返回undefined\narr; // []\n")])])]),e("h3",{attrs:{id:"sort"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sort","aria-hidden":"true"}},[a._v("#")]),a._v(" sort")]),a._v(" "),e("p",[a._v("sort()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = ['B', 'C', 'A'];\narr.sort();// ['A', 'B', 'C']\narr; // ['A', 'B', 'C']\n")])])]),e("h3",{attrs:{id:"reverse"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reverse","aria-hidden":"true"}},[a._v("#")]),a._v(" reverse")]),a._v(" "),e("p",[a._v("reverse()把整个Array的元素给掉个个，也就是反转：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = ['one', 'two', 'three'];\narr.reverse(); \narr; // ['three', 'two', 'one']\n")])])]),e("h3",{attrs:{id:"splice"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#splice","aria-hidden":"true"}},[a._v("#")]),a._v(" splice")]),a._v(" "),e("p",[a._v("splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//从索引2开始删除3个元素\nvar arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];\narr.splice(2,3);//返回删除的元素 [\"Yahoo\", \"AOL\", \"Excite\"]\narr;//[\"Microsoft\", \"Apple\", \"Oracle\"]\n\n// 从索引2开始删除3个元素,然后再添加两个元素:\nvar arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];\narr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']\narr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']\n\n// 只添加,不删除:\nvar arr = ['Microsoft', 'Apple', 'Oracle'];\narr.splice(2, 0, 'Google', 'Facebook');// 返回[],因为没有删除任何元素\narr;// [\"Microsoft\", \"Apple\", \"Google\", \"Facebook\", \"Oracle\"]\n")])])]),e("h3",{attrs:{id:"concat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concat","aria-hidden":"true"}},[a._v("#")]),a._v(" concat")]),a._v(" "),e("p",[a._v("concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr1 = [1,2,3];\nvar arr2 =['A','B','C'];\nvar newArr= arr1.concat(arr2);\nnewArr;// [1, 2, 3, \"A\", \"B\", \"C\"]\narr1;// [1,2,3];\n//concat方法并不会修改当前的数组\n")])])]),e("p",[a._v("concat()方法可以接收任意个元素和Array，并且自动把Array拆开，然后全部添加到新的Array里：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = ['A', 'B', 'C'];\narr.concat(1, 2, [3, 4]); // ['A', 'B', 'C', 1, 2, 3, 4]\n")])])]),e("h3",{attrs:{id:"join"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#join","aria-hidden":"true"}},[a._v("#")]),a._v(" join")]),a._v(" "),e("p",[a._v("join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = ['A', 'B', 'C', 1, 2, 3];\narr.join('-'); // 'A-B-C-1-2-3'\n")])])]),e("h3",{attrs:{id:"多维数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多维数组","aria-hidden":"true"}},[a._v("#")]),a._v(" 多维数组")]),a._v(" "),e("p",[a._v("如果数组的某个元素又是一个数组，则可以形成多维数组：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = [[1, 2, 3], [400, 500, 600], '-'];\n")])])]),e("p",[a._v("通过索引取到500这个值：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = [[1, 2, 3], [400, 500, 600], '-'];\nvar x = arr[1][1];\n")])])])])}],!1,null,null,null);r.default=s.exports}}]);