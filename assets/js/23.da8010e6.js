(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{176:function(e,a,s){"use strict";s.r(a);var r=s(0),t=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"dapper的使用入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dapper的使用入门","aria-hidden":"true"}},[e._v("#")]),e._v(" Dapper的使用入门")]),e._v(" "),s("h3",{attrs:{id:"一、安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、安装","aria-hidden":"true"}},[e._v("#")]),e._v(" 一、安装")]),e._v(" "),s("p",[e._v("在https://www.nuget.org中查找Dapper，显示如下：\n"),s("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/1708638-37aa0ac4025d12e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}}),e._v("\n我们在VS的程序包管理控制台输入安装命令Install-Package Dapper即可")]),e._v(" "),s("h3",{attrs:{id:"二、简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、简介","aria-hidden":"true"}},[e._v("#")]),e._v(" 二、简介")]),e._v(" "),s("p",[e._v("Dapper作为一款轻量级ORM工具，那什么是ORM呢？\nORM就是Object-Relational Mapping（对象-关系映射，简称ORM），对象和关系数据是业务实体的两种表现形式，ORM就相当于一个中间件，起到了对象和数据库数据之间的映射。")]),e._v(" "),s("h3",{attrs:{id:"三、基本用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、基本用法","aria-hidden":"true"}},[e._v("#")]),e._v(" 三、基本用法")]),e._v(" "),s("p",[e._v("我们建立了两张表UserInfo和UserAccount和对应的类UserInfo和Users，首先要做的就是连接数据库")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const string _connectionString = "Data Source=.;Initial Catalog=RekTecTest;Integrated Security=True;MultipleActiveResultSets=True";\nusing (IDbConnection connection = new SqlConnection(_connectionString))\n{\n\n}\n')])])]),s("p",[e._v("接着我们插入数据到新建的表中")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('//插入一条对象\nvar result = connection.Execute("Insert into UserAccount values (@UserName, @UserID, @PassWord,@CreateTime)",\n      new { UserName = "jack", UserID = "10081", PassWord = "123451", CreateTime = "2018-3-1 19:18:19" });\nconnection.Execute("Insert into UserInfo(Name,Address) values (@username,@Address)",\n      new { username = "张三", Address = "苏州" });\n')])])]),s("p",[e._v("这里我们插入的是一个匿名对象，可以将数据库的参数省略不写。")]),e._v(" "),s("p",[e._v("当然也可以批量插入")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('connection.Execute("insert into UserInfo(Address,Name) values(@address,@name)", \n    new[] {\n        new { Address = "上海", Name = "李四" },\n        new { Address = "北京", Name = "王五" },\n        new { Address = "杭州", Name = "赵六" }\n    });\n或者\nvar usersList = Enumerable.Range(0, 5).Select(i => new Users()\n{\n    UserName = "jack" + i,\n    UserID = 10000 + i,\n    PassWord = "jack"+i,\n    CreateTime = "2018-3-1 19:25:06"\n});\nvar result = connection.Execute("Insert into UserAccount values(@UserName, @UserID, @PassWord,@CreateTime)", usersList);\n')])])]),s("p",[e._v("查询")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('//查询-参数化查询\nvar query = connection.Query<Users>("select * from UserAccount where UserName=@UserName and UserID=@UserID", new { UserName = "李四", UserID = 1002 });\nConsole.WriteLine(query.FirstOrDefault().UserName);\n')])])]),s("p",[e._v("将查询结果映射到匿名类型")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('var result = connection.Query("select top 10 * from UserInfo");\nvar resultList = result.AsList();\nforeach (var l in resultList)\n     Console.WriteLine(l.Name);\n')])])]),s("p",[e._v("关联查询")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('var result = connection.Query<UserInfo, Users, string>("select u1.Name,u2.UserID from UserInfo u1,UserAccount u2 where u1.Name=u2.UserName",\n    (u1, u2) =>\n    {\n        return u1.Name + " " + u2.UserID;\n    },\n    splitOn: "UserID");\nforeach (var r in result)\n{\n    Console.WriteLine(r);\n}\n')])])]),s("p",[e._v("查询多个")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('string sql = "select * from UserInfo;select * from UserAccount";\nusing (varmultipleReader=connection.QueryMultiple(sql)\n{\n    var userInfo=multipleReader.Read<UserInfo>();\n    var users =multipleReader.Read<Users>();\n}\n')])])]),s("p",[e._v("更新")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('connection.Execute("update UserAccount set UserName=@UserName where UserID=@UserID", new{UserName="CurryZhang", UserID = 10081 });\n')])])]),s("p",[e._v("删除")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('connection.Execute("delete from UserAccount where UserName like \'%jack%\'");\n//删除-参数化\n//connection.Execute("delete from UserAccount where UserName=@name",new { name="张飞"});\n')])])]),s("h3",{attrs:{id:"四-、orm的优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四-、orm的优缺点","aria-hidden":"true"}},[e._v("#")]),e._v(" 四.、ORM的优缺点")]),e._v(" "),s("p",[e._v("优点：\n1）提高开发效率，降低开发成本\n2）使开发更加对象化\n3）可移植\n4）可以很方便地引入数据缓存之类的附加功能\n缺点：\n1）自动化进行关系数据库的映射需要消耗系统性能。其实这里的性能消耗还好啦，一般来说都可以忽略之。\n2）在处理多表联查、where条件复杂之类的查询时，ORM的语法会变得复杂。")]),e._v(" "),s("h3",{attrs:{id:"五、dapper优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、dapper优点","aria-hidden":"true"}},[e._v("#")]),e._v(" 五、Dapper优点")]),e._v(" "),s("ul",[s("li",[e._v("Dapper是一个轻量级的ORM框架，它是通过扩展IDbConnection接口来实现一系列的功能的。相比EF、NHibernate，它的功能较为简单。")]),e._v(" "),s("li",[e._v("Dapper在执行查询语句时会缓存SQL语句的相关信息，这样就保证了Dapper拥有较高的性能")])])])}],!1,null,null,null);a.default=t.exports}}]);