(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{175:function(e,n,t){"use strict";t.r(n);var r=t(0),a=Object(r.a)({},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content"},[e._m(0),e._v(" "),t("p",[e._v("注意点：")]),e._v(" "),e._m(1),e._v(" "),t("p",[e._v("扩展方法最大的用途就是为LINQ服务，Enumerable和Queryable都是在System.Linq命名空间中，Enumerable的大多数扩展的是IEnumerable"),t("T",[e._v("，Queryable的大多数扩展的是IQueryable"),t("T",[e._v("。")])],1)],1),e._v(" "),e._m(2),t("p",[e._v("附上经典的linq中Distinct去重，我们无法按照具体需求或某个字段去重，这时候扩张方法就派上用场了")]),e._v(" "),e._m(3),t("p",[e._v("使用")]),e._v(" "),e._m(4)])},[function(){var e=this.$createElement,n=this._self._c||e;return n("h1",{attrs:{id:"c-重温—扩展方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#c-重温—扩展方法","aria-hidden":"true"}},[this._v("#")]),this._v(" C#重温—扩展方法")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ol",[t("li",[e._v("必须在一个非嵌套的、非泛型的静态类中（所以必须是一个静态方法）")]),e._v(" "),t("li",[e._v("至少有一个参数")]),e._v(" "),t("li",[e._v("第一个参数必须附加this关键字作为前缀")]),e._v(" "),t("li",[e._v("第一个参数不能有其他任何修饰符（比如out、ref）")]),e._v(" "),t("li",[e._v("第一个参数的类型不能是指针类型")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("public class Person\n{\n    public string Name { set; get; }\n    public int Age { set; get; }\n}\n\npublic static class Extension\n{\n    //Person的扩展方法，根据年龄判断是否是成年人\n    public static bool IsChild(this Person oPerson)\n    {\n        if (oPerson.Age >= 18)\n            return false;\n        else\n            return true;\n    }\n}\n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("public static class DistinctExtensions  \n{  \n   public static IEnumerable<T> Distinct<T, V>(this IEnumerable<T> source, Func<T, V> keySelector)  \n   {  \n        return source.Distinct(new CommonEqualityComparer<T, V>(keySelector));  \n    }  \n} \n\npublic class CommonEqualityComparer<T, V> : IEqualityComparer<T>  \n{  \n    private Func<T, V> keySelector;  \n  \n    public CommonEqualityComparer(Func<T, V> keySelector)  \n    {  \n        this.keySelector = keySelector;  \n    }  \n  \n    public bool Equals(T x, T y)  \n    {  \n        return EqualityComparer<V>.Default.Equals(keySelector(x), keySelector(y));  \n    }  \n  \n    public int GetHashCode(T obj)  \n    {  \n        return EqualityComparer<V>.Default.GetHashCode(keySelector(obj));  \n    }  \n}  \n")])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('Product[] products =   \n{  \n    new Product { Name = "Smallapple", Code = 9 },   \n    new Product { Name = "orange", Code = 4 },   \n    new Product { Name = "Bigapple", Code = 9 },  \n    new Product { Name = "lemon", Code = 12 }  \n};  \n  \nvar p1 = products.Distinct(p => p.Code); //按照code来去重 \nforeach (Product pro in p1)  \n    Console.WriteLine(pro.Name + "," + pro.Code); \nConsole.ReadKey();\n')])])])}],!1,null,null,null);a.options.__file="扩展方法.md";n.default=a.exports}}]);